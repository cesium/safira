#!/usr/bin/env bash

set -Eeuo pipefail

BASE_DIR=$(dirname "${BASH_SOURCE[0]:-$0}")
cd "${BASE_DIR}/.." || exit 127

# shellcheck source=../scripts/helpers.sh
. scripts/helpers.sh
# shellcheck source=../scripts/logging.sh
. scripts/logging.sh
# shellcheck source=../scripts/utils.sh
. scripts/utils.sh

PROGRAM=$(basename "${BASH_SOURCE[0]:-$0}")
VERSION=0.5.4

function display_help() {
  cat <<EOF
  $(help_title_section Usage)
    ${PROGRAM} [options] <environment>

  $(help_title_section Environments)
    dev               Development environment [default environment].
    prod              Production environment.

  $(help_title_section Modes)
    -d --docker       Setup the project using docker [default mode].
    -l --local        Setup the project locally.

  $(help_title_section Options)
    -h --help         Show this screen.
    -v --version      Show version.
EOF
}

ENV='dev'
MODE='docker'
OS=$(uname | tr '[:upper:]' '[:lower:]')

while [ ! $# -eq 0 ]; do
  case "$1" in
    -h | --help)
      display_help
      exit 0
      ;;
    -v | --version)
      display_version "${VERSION}" "${PROGRAM}"
      exit 0
      ;;
    -l | --local)
      MODE='local'
      ;;
    -d | --docker)
      MODE='docker'
      ;;
    *)
      display_help >&2
      exit 1
      ;;
  esac

  shift
done

log_info "setup" "Setting up the .env.${ENV}..."
if [ ! -f ".env.${ENV}" ]; then
  cp ".env.${ENV}.sample" ".env.${ENV}"
  log_success ".env.${ENV} file created, you might want to open .env and set the
    correct values. Make sure you export them into your environment before
    runing this script again."
  exit
else
  log_warn ".env.${ENV} file already exists, skipping..."
fi

if [ $MODE == "local" ]; then
  log_info "setup" "Installing required languages..."
  if not_installed "asdf"; then
    log_error "
    We are using asdf (https://github.com/asdf-vm/asdf) to manage tool
    dependencies, since it was not found on your system we cannot ensure that you
    are using the correct versions of all the tools. Please install it and run
    this script again, or proceed at your own peril.
  "

    ensure_confirmation
  else
    set +e
    asdf plugin-add erlang https://github.com/asdf-vm/asdf-erlang.git 2>/dev/null
    asdf plugin-add elixir https://github.com/asdf-vm/asdf-elixir.git 2>/dev/null
    set -e

    asdf install
  fi

  load_env_file ".env.${ENV}"

  log_info "setup" "Installing dependencies..."
  MIX_ENV=$ENV mix local.hex --force
  MIX_ENV=$ENV mix local.rebar --force
  MIX_ENV=$ENV mix deps.get

  log_info "setup" "Creating, running migrations and populating database..."
  MIX_ENV=$ENV mix ecto.setup

  log_info "setup" "You're good to go! Run bin/server to get the development server running."
else
  log_info "setup" "Building Docker image for Elixir."

  docker-compose -f docker-compose.dev.yml -f "${OS}.yml" build

  log_info "setup" "Image created you can now start the containers."
fi